package LTW2017061614;
/*
 * 方块类
 * 内含方块的基本方法（方块固定、新建、翻转、左移、右移、下移）
 */
public class Block {
	/*
	 * 方块用一个三维数组来存，分别是形状，形态，坐标(在4×4方格中，1表示要填充，0表示不填充)
	 *7种图形分别是J,L,S,Z,T,O,I
	 *4种形态,旋转得到的
	 */
	public final int shapes[][][] = new int[][][]{
		//J
			{{0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0},

			 {1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},

			 {1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0},

			 {1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0}}, 
			
		//L	
			{{1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0},

			 {1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0},

			 {1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0},

			 {0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0}},
			
		//S	
			{{0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,},

			 {1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,},

			 {0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,},

			 {1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,}},
			
		//Z	
			{{1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},

			 {0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0},

			 {1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0},

			 {0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0}},

		//T	
			{{0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0},

			 {1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0},

			 {1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0},

			 {0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0}},

		//O
			{{1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},

			 {1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},

			 {1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},

			 {1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0}},

		//I	
			{{0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},

			 {0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0},

			 {0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},

			 {0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0}},		};

	/**
	 * 	x,y用来记录方块4×4区域中的（0，0）点的位置，x,y中的（0，0）相对于map中是（1,0）	
	 */
	public int x;		
	public int y;
	public int blockType=0;	//方块类型
	public int blockState=0;  	//方块状态
	public int initX = 4;				//初始位置的X,Y值
	public int initY = 0;
	
	GamePanel game;				
	/** 构造方法*/
	Block(GamePanel game){		//引用游戏画板
		 this.game = game;
	}
	/** 新建方块（初始化）*/
	public void newblock(){
		blockType = (int)(Math.random()*1000)%7;   //范围0-6
		blockState = (int)(Math.random()*1000)%4;  //范围0-3
		x=initX;
		y=initY;
	}
	/**
	 * 把需要固定的方块固定
	 * 存放在map数组中
	 */
	public void add(){
		int i=0;
		for(int a=0;a<4;a++){
			for(int b=0;b<4;b++){
				if(game.map[x+1+b][y+a]==0){     // map[列][行]
					game.map[x+1+b][y+a]=shapes[blockType][blockState][i];
				}
				i++;
			}
		}
	}		
	/* 右移*/
	public void right() {
		if(!game.isCollied(x+1,y)){
			x++;
		}
			game.repaint();
	}
	/* 下移*/
	public void down() {
		if(!game.isCollied(x,y+1)){
			y++;
		}else{
			add();		//碰撞到底部后，把方块添加到画布上去
			game.deleteLine();
			newblock();
			}	
		game.repaint();
	}
	/* 左移*/
	public void left() {
		if(!game.isCollied(x-1,y)){
			x--;
		}		
		game.repaint();
	}
	/* 转换状态*/
	public void turnState() {
		int temp = blockState;		//首先记录本状态
		blockState = (blockState+1)%4;
		if(game.isCollied(x,y)){
			blockState = temp;
		}
		game.repaint();
	}
}

